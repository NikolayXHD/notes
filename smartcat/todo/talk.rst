Для начала, немного контекста.

TSS
---

Когда корп заказчик загружает проект в smartcat, ему подбирают исполнителей
на этапы проекта - перевод, редактуру и т.д.

Процедура подбора непростая, учитывает и сводит воедино много чего. В этом
рассказе мы сфокусируемся на признаке, что фрилансер недавно работал над
похожими текстами. За эту часть подбора отвечает сервис
TranslationSuggestService. Его сделали в ещё 21 году в качестве прототипа.

Embedding-и aka фичавекторы
---------------------------

Мы конвертируем некоторую единицу текста, например сегмент smartcat, в набор
чисел с плавающей точкой фиксированного размера, вектор. Магия машинного
обучения позволяет достичь того, что чем ближе в векторном пространстве
векторы, тем более похожи по смыслу тексты.

Интуитивно, отдельные координаты в векторном пространстве отвечают за степень
сродства текста с некоторым признаком или "фичей", отсюда и синоним embedding-а
фичавектор. К примеру, некоторая координата варьируется от -1 до +1 для текстов
про прошлое, настоящее либо будущее. Другая координата кодирует информацию о
поле текст скорее про мужчин или про женщин. И т.п.

Отличие от обычтного полнотекстового поиска, lucene, elastic

Старые добрые технологии полнотекстового поиска ориентируются на буквальное
совпадение. Для полнотекстового индекса дерево и трава - абсолютно разные
токены. Предложения "Собаки любят игры" и "Щенки обожают развлечения" не имеют
ничего общего кроме, разве что, количества слов. С другой стороны, в
пространстве embedding-ов эти предложения максимально близки.

Стоит упомянуть, что NNS в векторном пространстве применим не только для поиска
похожих текстов в чистом виде, но и как деталь реализации во многих других
Natural Language Processing задачах

Машстабирование TSS
-------------------

TSS приходится решать задачу поиск ближайших соседей в векторном пространстве,
Nearest Neigbour Search. Текущее решение - полный перебор

1 - линейный рост потребления CPU и задержки по мере роста базы.
2 - необходимость держать базу в памяти.

/home/kolia/Pictures/Screenshot_20221208_214346.png
хотя 99% ответов выполняются за доли секунды, 99 перцентиль стабильно на уровне
десятка секунд

В настоящий момент, TSS выполняет поиск по 1M векторов, каждый по 768
float32 координат. 3072 байта на вектор, 3GB на 1 миллион.

В 1M векторов помещается работа всех фрилансеров smartcat за 1 день. Если мы
хотим рекомендовать фрила на основе похожего текста, который он сдал не вчера,
а неделю назад, числа вырастут в 7 раз.

- 21 GB памяти
- Задержка ответа на уровне 1 мин

Готовые решения для Nearest Neighbour Search
--------------------------------------------
Жесткие требования
- Сублинейное замедление с ростом базы, O(Log(N))
- Экономный расход RAM
Хотелки
- Подробная документация
- Зрелая, работающая из коробки технология вроде баз данных SQL / noSQL
- Возможность замены RAM на быстрое дисковое хранилище
- OpenSource, self-hosted

Milvus
Weaviate
...
+ web API
+ documentation
- x5 RAM
- expensive if externally managed
- no HDD

managed instance

Ориентируемся на работу фрилов smartcat за 1 месяц = 30M векторов

$2250 / month
$4500 с отказоустойчивостью (резервный инстанс)
https://weaviate.io/pricing.html#embeddingSize=768&amountOfDataObjs=30000000&queriesPerMonth=29000000&slaTier=standard

self-hosted instance

30M векторов x768 x4 байт x 5 = 430 GB
430GB x $3 / month / GB ~= $1300 / month
$2600 с отказоустойчивостью

Annoy (Spotify)
+ fast
+ out of RAM
- no web API
- fine-tuning
- low recall

Granne
+ fast
+ out of RAM
+ x0.25 RAM (compression float32 -> byte)
- no web API
- sparse documentation

30M векторов x768 x1 байт = 22GB
22GB x $3 / month / GB ~= $70 / month

с отказоустойчивостью $140 / month

Сервис индексации
-----------------

API-обёртка над технологией granne
Управляемый рост базы, ротация данных
Резервное копирование
Деление на разные физические индексы по признаку поискового фильтра
  - язык для TSS
  - для потенциальных будущих потребителей, напр. корп-аккакунт, которому
    принадлежит текст
Компрессия векторов, двухэтапный поиск

Стек
----
В основе granne - rust + python bindings
Отсюда web-service на Python
Т.к. API миниатюрно, простой низкоуровневый фреймворк aiohttp

Нерешённая проблема RAM
-----------------------
Хотя есть техническая возможность разменять скорость на цену за хостинг,
ценники AWS за хранилище таковы, что дешевле(!) платить за RAM

Причина в том, что если платить за "просто SSD", номинальная пропускная
способность (IOPS), предоставляется на небольшую долю суток. При постоянной
нагрузке, через несколько часов включится ограничение. Чтобы этого не было,
нужно оплачивать "Зарезервированную пропускную способность" (Provisioned IOPS)

https://portal.smartcat.ai/youtrack/api/files/88-102981?sign=MTY3MDcxNjgwMDAwMHwyMi0xNjB8ODgtMTAyOTgxfFBQZ3hCWk1sLS0ycERicFJtdEdfc3lEaWNq%0D%0AZHZMZExqUlo3dHpiQ0xpM2sNCg%0D%0A&updated=1666179170069

Когда потребность в хранилище дорастёт до ~1000 GB, есть возможность дропнуть
цену за счёт скорости в 6 раз, подмена RAM -> RAID0 x4 SSD

Но по факту у нас в запасе есть вариант дополнительной компрессии x0.25



