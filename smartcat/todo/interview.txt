### Синтаксис и встроенные функции, для джуниора

Какие помните встроенные функции

контейнеры list, dict, set, tuple

перебор iter, next, enumerate, range

zip, map, sorted

Если не вспомнил range, попросить перебрать элементы списка в цикле

Что такое comprehension

Знает синтаксис

Может выполнить декартово произведение в рамках одного comprehension
`[
  my_2d_array[i, j] 
  for i in range(10)
  for j in range(10)
]`

Что такое slice

`my_array[i:j]`

Хорошо, если понимает продвинутые варианты

`my_array[10:-1:5]`

`my_array[:,:,2:]`

Что такое __dunder__ методы

__str__ __getitem__ __setitem__ __delitem__ __iter__ __len__

__eq__ __hash__

__add__

Что такое декоратор, синтаксис

функция, преобразующая функцию

спросить, влияет ли порядок декораторов на результат

Как устроен тип float

понимает устройство типа, что абсолютная погрешность представления меняется с величиной числа.

понимает, что кратные степени двойки дроби представлены без погрешности (если помещаются в мантиссу), и наоборот

### Философские вопросы

Особенности языка Python, область применения

Знает, что python интерпретируемый язык :)

Доп вопрос, зачем нужен / полезен интерпретатор Python (в консоли)

Понимает пользу цикла  разработки с быстрой обратной связью

Круто если умеет отлаживать в консоли

Почему говорят, что Python медленный язык, можно ли писать эффективный код на Python

Хорошо если знает, что Python интерпретируемый язык

Наводящий вопрос, почему range быстрее, чем цикл с инкрементом

потому что выполнятся скомпилированным кодом на C

Должен знать, что Python предоставляет интерфейс к расширениям на компилируемых языках, обычно C / C++, Cython

Должен знать, что эффективные алгоритмы библиотек для работы с данными написаны на компилируемых языках

Круто, если знает, что Python при необходимости можно компилировать

В каких случаях может быть полезен OOP и классы в Python

Помните пункты из дзена Python?

Расскажите про Single Responsibility Principle

### Модули, пакеты

Зачем нужна конструкция if __name__ == ‘__main__’: main()

Позволяет выполнить некоторый код модуля, когда он исполняется как скрипт python my_module.py, но не выполнять если происходит импорт: import my_module

Что происходит, при импорте модуля

Поиск модуля

Выполняются __init__.py

Неймспейс импортирующего модуля получает экспорты импортируемого

Зачем нужен список __all__

управляет, что попадает импорт со звёздочкой from my_module import *

наводящий вопрос, что делает from my_module import *

хорошо, если понимает, что без __all__ импорты пробрасываются в импортирующий модуль

Зачем нужна переменная среды PYTHONPATH

корневая директория для поиска модулей

Зачем нужна виртуальная среда Python

независимые версии библиотек для разных приложений во избежание конфликта зависимостей

возможность детерминированного окружения, для повышения надёжности и предсказуемости

### Диагностика, тесты, линтинг

Как диагностировать проблемы с производительностью, потреблением памяти

знает про стандартные пакеты profiling-а, memory profiling-а

знает про приложения для визуализации измерений, графы вызовов, горячий путь

Как отладить приложение

достаточно, если может отладить в IDE

совсем хорошо, если может и в консоли, знает про import pdb; pdb.set_trace(), либо breakpoint()

Это нормально, если считает, что без отладчика можно обойтись :)

Как писать тесты, зачем они нужны

знает какой-нибудь фреймворк

понимает пользу тестов

стремится покрывать код тестами, строит код достаточно модульно, избегает сильной связности, чтобы его можно было покрывать unit-ами

хорошо, если понимает принцип интерактивной разработки с моментальной обратной связью, как альтернативный способ тестировать новый код

понимает пирамиду тестирования, сравнительные преимущества unit перед end-to-end и наоборот

Расскажите про аннотации, зачем нужны, когда применяются

Хорошо если знает про mypy, typshed-ы

Хорошо если понимает, когда без аннотаций можно / предпочтительно обойтись

### Многопоточность и асинхронность

Как написать многопоточное приложение Python

Знает что Python однопоточный, знает про Global Interpreter Lock

Знает, что стандартные примитивы для многопоточности не допускают многопроцессорности, но позволяют выполнять другой поток, пока первый заблокирован на IO

Знает, что многопроцессорность достижима с помощью запуска отдельных процессов Python

Понимает, что в этом случае обмен данными между процессами требует сериализации / десериализации

Знает, что многопроцессорность достижима в C / C++ / Cython - расширениях

Обсудить асинхронный код в Pyhton

знает про корутины async / await

круто, если понимает логическую схожесть и связь между корутинами async / await и генератором (yield)

круто если знает про старый gevent

особенно круто, если знает, что gevent реализован через monkeypatch-инг библиотек, работающих с IO

понимает, что асинхронный != многопоточный, Python хорошо поддерживает первое, но сложнее со вторым
